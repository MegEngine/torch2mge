import operator
import pickle
import numpy as np
import megengine.module as M
import megengine.functional as F
from megengine import jit, tensor


class Module(M.Module):

    def forward(self, inputs):
        return super().forward(inputs)

class Helper:

    @staticmethod
    def transpose_pat(ndim, a, b):
        pat = list(range(ndim))
        pat[a], pat[b] = pat[b], pat[a]
        return pat
    

root = Module()
root.conv1 = M.Conv2d(in_channels=3, out_channels=64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), dilation=(1, 1), groups=1, bias=False)
root.bn1 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
root.relu = M.ReLU()
root.maxpool = M.MaxPool2d(kernel_size=3, stride=2, padding=1)
root.layer1 = Module()
setattr(root.layer1, "0", Module())
getattr(root.layer1, "0").conv1 = M.Conv2d(in_channels=64, out_channels=64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "0").bn1 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "0").relu = M.ReLU()
getattr(root.layer1, "0").conv2 = M.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "0").bn2 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "0").conv3 = M.Conv2d(in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "0").bn3 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "0").downsample = Module()
setattr(getattr(root.layer1, "0").downsample, "0", M.Conv2d(in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False))
setattr(getattr(root.layer1, "0").downsample, "1", M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True))
setattr(root.layer1, "1", Module())
getattr(root.layer1, "1").conv1 = M.Conv2d(in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "1").bn1 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "1").relu = M.ReLU()
getattr(root.layer1, "1").conv2 = M.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "1").bn2 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "1").conv3 = M.Conv2d(in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "1").bn3 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer1, "2", Module())
getattr(root.layer1, "2").conv1 = M.Conv2d(in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "2").bn1 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "2").relu = M.ReLU()
getattr(root.layer1, "2").conv2 = M.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "2").bn2 = M.BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer1, "2").conv3 = M.Conv2d(in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer1, "2").bn3 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
root.layer2 = Module()
setattr(root.layer2, "0", Module())
getattr(root.layer2, "0").conv1 = M.Conv2d(in_channels=256, out_channels=128, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "0").bn1 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "0").relu = M.ReLU()
getattr(root.layer2, "0").conv2 = M.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "0").bn2 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "0").conv3 = M.Conv2d(in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "0").bn3 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "0").downsample = Module()
setattr(getattr(root.layer2, "0").downsample, "0", M.Conv2d(in_channels=256, out_channels=512, kernel_size=(1, 1), stride=(2, 2), padding=(0, 0), dilation=(1, 1), groups=1, bias=False))
setattr(getattr(root.layer2, "0").downsample, "1", M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True))
setattr(root.layer2, "1", Module())
getattr(root.layer2, "1").conv1 = M.Conv2d(in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "1").bn1 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "1").relu = M.ReLU()
getattr(root.layer2, "1").conv2 = M.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "1").bn2 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "1").conv3 = M.Conv2d(in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "1").bn3 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer2, "2", Module())
getattr(root.layer2, "2").conv1 = M.Conv2d(in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "2").bn1 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "2").relu = M.ReLU()
getattr(root.layer2, "2").conv2 = M.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "2").bn2 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "2").conv3 = M.Conv2d(in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "2").bn3 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer2, "3", Module())
getattr(root.layer2, "3").conv1 = M.Conv2d(in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "3").bn1 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "3").relu = M.ReLU()
getattr(root.layer2, "3").conv2 = M.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "3").bn2 = M.BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer2, "3").conv3 = M.Conv2d(in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer2, "3").bn3 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
root.layer3 = Module()
setattr(root.layer3, "0", Module())
getattr(root.layer3, "0").conv1 = M.Conv2d(in_channels=512, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "0").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "0").relu = M.ReLU()
getattr(root.layer3, "0").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "0").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "0").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "0").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "0").downsample = Module()
setattr(getattr(root.layer3, "0").downsample, "0", M.Conv2d(in_channels=512, out_channels=1024, kernel_size=(1, 1), stride=(2, 2), padding=(0, 0), dilation=(1, 1), groups=1, bias=False))
setattr(getattr(root.layer3, "0").downsample, "1", M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True))
setattr(root.layer3, "1", Module())
getattr(root.layer3, "1").conv1 = M.Conv2d(in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "1").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "1").relu = M.ReLU()
getattr(root.layer3, "1").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "1").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "1").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "1").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer3, "2", Module())
getattr(root.layer3, "2").conv1 = M.Conv2d(in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "2").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "2").relu = M.ReLU()
getattr(root.layer3, "2").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "2").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "2").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "2").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer3, "3", Module())
getattr(root.layer3, "3").conv1 = M.Conv2d(in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "3").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "3").relu = M.ReLU()
getattr(root.layer3, "3").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "3").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "3").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "3").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer3, "4", Module())
getattr(root.layer3, "4").conv1 = M.Conv2d(in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "4").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "4").relu = M.ReLU()
getattr(root.layer3, "4").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "4").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "4").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "4").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer3, "5", Module())
getattr(root.layer3, "5").conv1 = M.Conv2d(in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "5").bn1 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "5").relu = M.ReLU()
getattr(root.layer3, "5").conv2 = M.Conv2d(in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "5").bn2 = M.BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer3, "5").conv3 = M.Conv2d(in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer3, "5").bn3 = M.BatchNorm2d(num_features=1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
root.layer4 = Module()
setattr(root.layer4, "0", Module())
getattr(root.layer4, "0").conv1 = M.Conv2d(in_channels=1024, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "0").bn1 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "0").relu = M.ReLU()
getattr(root.layer4, "0").conv2 = M.Conv2d(in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "0").bn2 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "0").conv3 = M.Conv2d(in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "0").bn3 = M.BatchNorm2d(num_features=2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "0").downsample = Module()
setattr(getattr(root.layer4, "0").downsample, "0", M.Conv2d(in_channels=1024, out_channels=2048, kernel_size=(1, 1), stride=(2, 2), padding=(0, 0), dilation=(1, 1), groups=1, bias=False))
setattr(getattr(root.layer4, "0").downsample, "1", M.BatchNorm2d(num_features=2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True))
setattr(root.layer4, "1", Module())
getattr(root.layer4, "1").conv1 = M.Conv2d(in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "1").bn1 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "1").relu = M.ReLU()
getattr(root.layer4, "1").conv2 = M.Conv2d(in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "1").bn2 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "1").conv3 = M.Conv2d(in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "1").bn3 = M.BatchNorm2d(num_features=2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
setattr(root.layer4, "2", Module())
getattr(root.layer4, "2").conv1 = M.Conv2d(in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "2").bn1 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "2").relu = M.ReLU()
getattr(root.layer4, "2").conv2 = M.Conv2d(in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "2").bn2 = M.BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
getattr(root.layer4, "2").conv3 = M.Conv2d(in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0), dilation=(1, 1), groups=1, bias=False)
getattr(root.layer4, "2").bn3 = M.BatchNorm2d(num_features=2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
root.avgpool = M.AdaptiveAvgPool2d(oshp=(1, 1))
root.fc = M.Linear(in_features=2048, out_features=1000, bias=True)

@jit.trace(capture_as_const=True)
def forward(x):
    conv1=root.conv1(x)
    bn1=root.bn1(conv1)
    relu_1=root.relu(bn1)
    maxpool=root.maxpool(relu_1)
    layer1_0_conv1=getattr(root.layer1, "0").conv1(maxpool)
    layer1_0_bn1=getattr(root.layer1, "0").bn1(layer1_0_conv1)
    layer1_0_relu=getattr(root.layer1, "0").relu(layer1_0_bn1)
    layer1_0_conv2=getattr(root.layer1, "0").conv2(layer1_0_relu)
    layer1_0_bn2=getattr(root.layer1, "0").bn2(layer1_0_conv2)
    layer1_0_relu_1=getattr(root.layer1, "0").relu(layer1_0_bn2)
    layer1_0_conv3=getattr(root.layer1, "0").conv3(layer1_0_relu_1)
    layer1_0_bn3=getattr(root.layer1, "0").bn3(layer1_0_conv3)
    layer1_0_downsample_0=getattr(getattr(root.layer1, "0").downsample, "0")(maxpool)
    layer1_0_downsample_1=getattr(getattr(root.layer1, "0").downsample, "1")(layer1_0_downsample_0)
    add_1=F.add(layer1_0_bn3, layer1_0_downsample_1)
    layer1_0_relu_2=getattr(root.layer1, "0").relu(add_1)
    layer1_1_conv1=getattr(root.layer1, "1").conv1(layer1_0_relu_2)
    layer1_1_bn1=getattr(root.layer1, "1").bn1(layer1_1_conv1)
    layer1_1_relu=getattr(root.layer1, "1").relu(layer1_1_bn1)
    layer1_1_conv2=getattr(root.layer1, "1").conv2(layer1_1_relu)
    layer1_1_bn2=getattr(root.layer1, "1").bn2(layer1_1_conv2)
    layer1_1_relu_1=getattr(root.layer1, "1").relu(layer1_1_bn2)
    layer1_1_conv3=getattr(root.layer1, "1").conv3(layer1_1_relu_1)
    layer1_1_bn3=getattr(root.layer1, "1").bn3(layer1_1_conv3)
    add_2=F.add(layer1_1_bn3, layer1_0_relu_2)
    layer1_1_relu_2=getattr(root.layer1, "1").relu(add_2)
    layer1_2_conv1=getattr(root.layer1, "2").conv1(layer1_1_relu_2)
    layer1_2_bn1=getattr(root.layer1, "2").bn1(layer1_2_conv1)
    layer1_2_relu=getattr(root.layer1, "2").relu(layer1_2_bn1)
    layer1_2_conv2=getattr(root.layer1, "2").conv2(layer1_2_relu)
    layer1_2_bn2=getattr(root.layer1, "2").bn2(layer1_2_conv2)
    layer1_2_relu_1=getattr(root.layer1, "2").relu(layer1_2_bn2)
    layer1_2_conv3=getattr(root.layer1, "2").conv3(layer1_2_relu_1)
    layer1_2_bn3=getattr(root.layer1, "2").bn3(layer1_2_conv3)
    add_3=F.add(layer1_2_bn3, layer1_1_relu_2)
    layer1_2_relu_2=getattr(root.layer1, "2").relu(add_3)
    layer2_0_conv1=getattr(root.layer2, "0").conv1(layer1_2_relu_2)
    layer2_0_bn1=getattr(root.layer2, "0").bn1(layer2_0_conv1)
    layer2_0_relu=getattr(root.layer2, "0").relu(layer2_0_bn1)
    layer2_0_conv2=getattr(root.layer2, "0").conv2(layer2_0_relu)
    layer2_0_bn2=getattr(root.layer2, "0").bn2(layer2_0_conv2)
    layer2_0_relu_1=getattr(root.layer2, "0").relu(layer2_0_bn2)
    layer2_0_conv3=getattr(root.layer2, "0").conv3(layer2_0_relu_1)
    layer2_0_bn3=getattr(root.layer2, "0").bn3(layer2_0_conv3)
    layer2_0_downsample_0=getattr(getattr(root.layer2, "0").downsample, "0")(layer1_2_relu_2)
    layer2_0_downsample_1=getattr(getattr(root.layer2, "0").downsample, "1")(layer2_0_downsample_0)
    add_4=F.add(layer2_0_bn3, layer2_0_downsample_1)
    layer2_0_relu_2=getattr(root.layer2, "0").relu(add_4)
    layer2_1_conv1=getattr(root.layer2, "1").conv1(layer2_0_relu_2)
    layer2_1_bn1=getattr(root.layer2, "1").bn1(layer2_1_conv1)
    layer2_1_relu=getattr(root.layer2, "1").relu(layer2_1_bn1)
    layer2_1_conv2=getattr(root.layer2, "1").conv2(layer2_1_relu)
    layer2_1_bn2=getattr(root.layer2, "1").bn2(layer2_1_conv2)
    layer2_1_relu_1=getattr(root.layer2, "1").relu(layer2_1_bn2)
    layer2_1_conv3=getattr(root.layer2, "1").conv3(layer2_1_relu_1)
    layer2_1_bn3=getattr(root.layer2, "1").bn3(layer2_1_conv3)
    add_5=F.add(layer2_1_bn3, layer2_0_relu_2)
    layer2_1_relu_2=getattr(root.layer2, "1").relu(add_5)
    layer2_2_conv1=getattr(root.layer2, "2").conv1(layer2_1_relu_2)
    layer2_2_bn1=getattr(root.layer2, "2").bn1(layer2_2_conv1)
    layer2_2_relu=getattr(root.layer2, "2").relu(layer2_2_bn1)
    layer2_2_conv2=getattr(root.layer2, "2").conv2(layer2_2_relu)
    layer2_2_bn2=getattr(root.layer2, "2").bn2(layer2_2_conv2)
    layer2_2_relu_1=getattr(root.layer2, "2").relu(layer2_2_bn2)
    layer2_2_conv3=getattr(root.layer2, "2").conv3(layer2_2_relu_1)
    layer2_2_bn3=getattr(root.layer2, "2").bn3(layer2_2_conv3)
    add_6=F.add(layer2_2_bn3, layer2_1_relu_2)
    layer2_2_relu_2=getattr(root.layer2, "2").relu(add_6)
    layer2_3_conv1=getattr(root.layer2, "3").conv1(layer2_2_relu_2)
    layer2_3_bn1=getattr(root.layer2, "3").bn1(layer2_3_conv1)
    layer2_3_relu=getattr(root.layer2, "3").relu(layer2_3_bn1)
    layer2_3_conv2=getattr(root.layer2, "3").conv2(layer2_3_relu)
    layer2_3_bn2=getattr(root.layer2, "3").bn2(layer2_3_conv2)
    layer2_3_relu_1=getattr(root.layer2, "3").relu(layer2_3_bn2)
    layer2_3_conv3=getattr(root.layer2, "3").conv3(layer2_3_relu_1)
    layer2_3_bn3=getattr(root.layer2, "3").bn3(layer2_3_conv3)
    add_7=F.add(layer2_3_bn3, layer2_2_relu_2)
    layer2_3_relu_2=getattr(root.layer2, "3").relu(add_7)
    layer3_0_conv1=getattr(root.layer3, "0").conv1(layer2_3_relu_2)
    layer3_0_bn1=getattr(root.layer3, "0").bn1(layer3_0_conv1)
    layer3_0_relu=getattr(root.layer3, "0").relu(layer3_0_bn1)
    layer3_0_conv2=getattr(root.layer3, "0").conv2(layer3_0_relu)
    layer3_0_bn2=getattr(root.layer3, "0").bn2(layer3_0_conv2)
    layer3_0_relu_1=getattr(root.layer3, "0").relu(layer3_0_bn2)
    layer3_0_conv3=getattr(root.layer3, "0").conv3(layer3_0_relu_1)
    layer3_0_bn3=getattr(root.layer3, "0").bn3(layer3_0_conv3)
    layer3_0_downsample_0=getattr(getattr(root.layer3, "0").downsample, "0")(layer2_3_relu_2)
    layer3_0_downsample_1=getattr(getattr(root.layer3, "0").downsample, "1")(layer3_0_downsample_0)
    add_8=F.add(layer3_0_bn3, layer3_0_downsample_1)
    layer3_0_relu_2=getattr(root.layer3, "0").relu(add_8)
    layer3_1_conv1=getattr(root.layer3, "1").conv1(layer3_0_relu_2)
    layer3_1_bn1=getattr(root.layer3, "1").bn1(layer3_1_conv1)
    layer3_1_relu=getattr(root.layer3, "1").relu(layer3_1_bn1)
    layer3_1_conv2=getattr(root.layer3, "1").conv2(layer3_1_relu)
    layer3_1_bn2=getattr(root.layer3, "1").bn2(layer3_1_conv2)
    layer3_1_relu_1=getattr(root.layer3, "1").relu(layer3_1_bn2)
    layer3_1_conv3=getattr(root.layer3, "1").conv3(layer3_1_relu_1)
    layer3_1_bn3=getattr(root.layer3, "1").bn3(layer3_1_conv3)
    add_9=F.add(layer3_1_bn3, layer3_0_relu_2)
    layer3_1_relu_2=getattr(root.layer3, "1").relu(add_9)
    layer3_2_conv1=getattr(root.layer3, "2").conv1(layer3_1_relu_2)
    layer3_2_bn1=getattr(root.layer3, "2").bn1(layer3_2_conv1)
    layer3_2_relu=getattr(root.layer3, "2").relu(layer3_2_bn1)
    layer3_2_conv2=getattr(root.layer3, "2").conv2(layer3_2_relu)
    layer3_2_bn2=getattr(root.layer3, "2").bn2(layer3_2_conv2)
    layer3_2_relu_1=getattr(root.layer3, "2").relu(layer3_2_bn2)
    layer3_2_conv3=getattr(root.layer3, "2").conv3(layer3_2_relu_1)
    layer3_2_bn3=getattr(root.layer3, "2").bn3(layer3_2_conv3)
    add_10=F.add(layer3_2_bn3, layer3_1_relu_2)
    layer3_2_relu_2=getattr(root.layer3, "2").relu(add_10)
    layer3_3_conv1=getattr(root.layer3, "3").conv1(layer3_2_relu_2)
    layer3_3_bn1=getattr(root.layer3, "3").bn1(layer3_3_conv1)
    layer3_3_relu=getattr(root.layer3, "3").relu(layer3_3_bn1)
    layer3_3_conv2=getattr(root.layer3, "3").conv2(layer3_3_relu)
    layer3_3_bn2=getattr(root.layer3, "3").bn2(layer3_3_conv2)
    layer3_3_relu_1=getattr(root.layer3, "3").relu(layer3_3_bn2)
    layer3_3_conv3=getattr(root.layer3, "3").conv3(layer3_3_relu_1)
    layer3_3_bn3=getattr(root.layer3, "3").bn3(layer3_3_conv3)
    add_11=F.add(layer3_3_bn3, layer3_2_relu_2)
    layer3_3_relu_2=getattr(root.layer3, "3").relu(add_11)
    layer3_4_conv1=getattr(root.layer3, "4").conv1(layer3_3_relu_2)
    layer3_4_bn1=getattr(root.layer3, "4").bn1(layer3_4_conv1)
    layer3_4_relu=getattr(root.layer3, "4").relu(layer3_4_bn1)
    layer3_4_conv2=getattr(root.layer3, "4").conv2(layer3_4_relu)
    layer3_4_bn2=getattr(root.layer3, "4").bn2(layer3_4_conv2)
    layer3_4_relu_1=getattr(root.layer3, "4").relu(layer3_4_bn2)
    layer3_4_conv3=getattr(root.layer3, "4").conv3(layer3_4_relu_1)
    layer3_4_bn3=getattr(root.layer3, "4").bn3(layer3_4_conv3)
    add_12=F.add(layer3_4_bn3, layer3_3_relu_2)
    layer3_4_relu_2=getattr(root.layer3, "4").relu(add_12)
    layer3_5_conv1=getattr(root.layer3, "5").conv1(layer3_4_relu_2)
    layer3_5_bn1=getattr(root.layer3, "5").bn1(layer3_5_conv1)
    layer3_5_relu=getattr(root.layer3, "5").relu(layer3_5_bn1)
    layer3_5_conv2=getattr(root.layer3, "5").conv2(layer3_5_relu)
    layer3_5_bn2=getattr(root.layer3, "5").bn2(layer3_5_conv2)
    layer3_5_relu_1=getattr(root.layer3, "5").relu(layer3_5_bn2)
    layer3_5_conv3=getattr(root.layer3, "5").conv3(layer3_5_relu_1)
    layer3_5_bn3=getattr(root.layer3, "5").bn3(layer3_5_conv3)
    add_13=F.add(layer3_5_bn3, layer3_4_relu_2)
    layer3_5_relu_2=getattr(root.layer3, "5").relu(add_13)
    layer4_0_conv1=getattr(root.layer4, "0").conv1(layer3_5_relu_2)
    layer4_0_bn1=getattr(root.layer4, "0").bn1(layer4_0_conv1)
    layer4_0_relu=getattr(root.layer4, "0").relu(layer4_0_bn1)
    layer4_0_conv2=getattr(root.layer4, "0").conv2(layer4_0_relu)
    layer4_0_bn2=getattr(root.layer4, "0").bn2(layer4_0_conv2)
    layer4_0_relu_1=getattr(root.layer4, "0").relu(layer4_0_bn2)
    layer4_0_conv3=getattr(root.layer4, "0").conv3(layer4_0_relu_1)
    layer4_0_bn3=getattr(root.layer4, "0").bn3(layer4_0_conv3)
    layer4_0_downsample_0=getattr(getattr(root.layer4, "0").downsample, "0")(layer3_5_relu_2)
    layer4_0_downsample_1=getattr(getattr(root.layer4, "0").downsample, "1")(layer4_0_downsample_0)
    add_14=F.add(layer4_0_bn3, layer4_0_downsample_1)
    layer4_0_relu_2=getattr(root.layer4, "0").relu(add_14)
    layer4_1_conv1=getattr(root.layer4, "1").conv1(layer4_0_relu_2)
    layer4_1_bn1=getattr(root.layer4, "1").bn1(layer4_1_conv1)
    layer4_1_relu=getattr(root.layer4, "1").relu(layer4_1_bn1)
    layer4_1_conv2=getattr(root.layer4, "1").conv2(layer4_1_relu)
    layer4_1_bn2=getattr(root.layer4, "1").bn2(layer4_1_conv2)
    layer4_1_relu_1=getattr(root.layer4, "1").relu(layer4_1_bn2)
    layer4_1_conv3=getattr(root.layer4, "1").conv3(layer4_1_relu_1)
    layer4_1_bn3=getattr(root.layer4, "1").bn3(layer4_1_conv3)
    add_15=F.add(layer4_1_bn3, layer4_0_relu_2)
    layer4_1_relu_2=getattr(root.layer4, "1").relu(add_15)
    layer4_2_conv1=getattr(root.layer4, "2").conv1(layer4_1_relu_2)
    layer4_2_bn1=getattr(root.layer4, "2").bn1(layer4_2_conv1)
    layer4_2_relu=getattr(root.layer4, "2").relu(layer4_2_bn1)
    layer4_2_conv2=getattr(root.layer4, "2").conv2(layer4_2_relu)
    layer4_2_bn2=getattr(root.layer4, "2").bn2(layer4_2_conv2)
    layer4_2_relu_1=getattr(root.layer4, "2").relu(layer4_2_bn2)
    layer4_2_conv3=getattr(root.layer4, "2").conv3(layer4_2_relu_1)
    layer4_2_bn3=getattr(root.layer4, "2").bn3(layer4_2_conv3)
    add_16=F.add(layer4_2_bn3, layer4_1_relu_2)
    layer4_2_relu_2=getattr(root.layer4, "2").relu(add_16)
    avgpool=root.avgpool(layer4_2_relu_2)
    flatten_1=F.flatten(avgpool, 1)
    fc=root.fc(flatten_1)
    return fc

with open("state.pkl", "rb") as f:
    state = pickle.load(f)
tstate = root.state_dict()
for k in tstate.keys():
    state[k] = state[k].reshape(tstate[k].shape)
root.load_state_dict(state, strict=False)
data = tensor(np.random.random([1, 3, 224, 224]).astype(np.float32))

root.eval()
ret = forward(data)
forward.dump("model.mgb", arg_names=["data"])
